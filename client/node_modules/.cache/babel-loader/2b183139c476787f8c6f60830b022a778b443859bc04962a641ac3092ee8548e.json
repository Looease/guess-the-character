{"ast":null,"code":"var _jsxFileName = \"/Users/louisegilligan/GitRepos/guess-the-character/client/src/components/Answers/Answers.tsx\",\n  _s = $RefreshSig$();\nimport \"./Answers.css\";\nimport Results from \"../Results/Results\";\nimport { updateAnswer } from \"../../requests/updateAnswer\";\nimport { useLocalStorageState } from \"../../hooks/useLocalStorage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Answers = ({\n  answers,\n  scores\n}) => {\n  _s();\n  const [answers1, setAnswers] = useLocalStorageState('answer', []);\n  let test = [];\n\n  // const handleSetAnswer = () => {\n  //   if (scores !== null) {\n  //     setAnswers( 'answer',(prevAnswers: AnswerData[]) => [...prevAnswers, scores]);\n  //   }\n  // };\n\n  const handleSetAnswer = answer => {\n    let string = JSON.stringify(test);\n    localStorage.setItem(\"key\", string);\n    let retString = localStorage.getItem(\"key\");\n\n    // Retrieved array\n    let retArray = JSON.parse(retString);\n\n    // Retrieve existing answers from local storage\n    const existingAnswersString = window.localStorage.getItem('answer');\n    const existingAnswers = existingAnswersString ? JSON.parse(existingAnswersString) : [];\n\n    // Append the new answer to the existing array\n    const updatedAnswers = [...existingAnswers, answer];\n\n    // Save the updated array back to local storage\n    // window.localStorage.setItem('answer', JSON.stringify(updatedAnswers));\n\n    // Optionally, you can also update the state if needed\n    // setAnswers(updatedAnswers);\n  };\n  console.log(answers1);\n  console.log(process.env);\n  console.log(scores);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [scores && scores.length <= 9 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: answers.map((answer, index) => {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button\",\n          onClick: () => {\n            updateAnswer(answer);\n            handleSetAnswer(answer);\n          },\n          children: answer.answer\n        }, `${answer.id}=${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: scores && scores.length >= 10 && /*#__PURE__*/_jsxDEV(Results, {\n        scores: scores\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 46\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(Answers, \"RwVKu7atCqQg+fdLBcQP1t6/Skc=\", false, function () {\n  return [useLocalStorageState];\n});\n_c = Answers;\nexport default Answers;\nvar _c;\n$RefreshReg$(_c, \"Answers\");","map":{"version":3,"names":["Results","updateAnswer","useLocalStorageState","jsxDEV","_jsxDEV","Answers","answers","scores","_s","answers1","setAnswers","test","handleSetAnswer","answer","string","JSON","stringify","localStorage","setItem","retString","getItem","retArray","parse","existingAnswersString","window","existingAnswers","updatedAnswers","console","log","process","env","children","length","className","map","index","onClick","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/louisegilligan/GitRepos/guess-the-character/client/src/components/Answers/Answers.tsx"],"sourcesContent":["import { FC } from \"react\";\nimport \"./Answers.css\";\nimport { AnswerData } from \"../../pages/Game/Game.types\";\nimport Results from \"../Results/Results\";\nimport { updateAnswer } from \"../../requests/updateAnswer\";\nimport {useLocalStorageState} from \"../../hooks/useLocalStorage\"\n\ntype AnswersProps = {\n  answers: AnswerData[];\n  scores?: AnswerData[];\n};\n\nconst Answers: FC<AnswersProps> = ({ answers, scores }) => {\n\n  const [answers1, setAnswers] = useLocalStorageState(\n    'answer',\n    []\n  );\nlet test: any = []\n    \n  \n\n\n  // const handleSetAnswer = () => {\n  //   if (scores !== null) {\n  //     setAnswers( 'answer',(prevAnswers: AnswerData[]) => [...prevAnswers, scores]);\n  //   }\n  // };\n  \n  const handleSetAnswer = (answer: AnswerData) => {\n\n    let string = JSON.stringify(test)\n\n    localStorage.setItem(\"key\", string)\n\n    let retString = localStorage.getItem(\"key\")\n\n// Retrieved array\nlet retArray = JSON.parse(retString)\n\n      // Retrieve existing answers from local storage\n      const existingAnswersString = window.localStorage.getItem('answer');\n      const existingAnswers = existingAnswersString ? JSON.parse(existingAnswersString) : [];\n  \n      // Append the new answer to the existing array\n      const updatedAnswers = [...existingAnswers, answer];\n  \n      // Save the updated array back to local storage\n     // window.localStorage.setItem('answer', JSON.stringify(updatedAnswers));\n  \n      // Optionally, you can also update the state if needed\n     // setAnswers(updatedAnswers);\n  \n  };\n  \n\n  console.log(answers1)\n  \n\n  console.log(process.env);\n  console.log(scores)\n  return (\n    <div>\n      {scores && scores.length <= 9 && (\n        <div className=\"button-container\">\n          {answers.map((answer, index) => {\n            return (\n              <button\n                className=\"button\"\n                key={`${answer.id}=${index}`}\n                onClick={() => {updateAnswer(answer)\n                  handleSetAnswer(answer)\n\n                }}>\n                {answer.answer}\n              </button>\n            );\n          })}\n        </div>\n      )}\n      <div>{scores && scores.length >= 10 && <Results scores={scores} />}</div>\n    </div>\n  );\n};\n\nexport default Answers;\n"],"mappings":";;AACA,OAAO,eAAe;AAEtB,OAAOA,OAAO,MAAM,oBAAoB;AACxC,SAASC,YAAY,QAAQ,6BAA6B;AAC1D,SAAQC,oBAAoB,QAAO,6BAA6B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAOhE,MAAMC,OAAyB,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAEzD,MAAM,CAACC,QAAQ,EAAEC,UAAU,CAAC,GAAGR,oBAAoB,CACjD,QAAQ,EACR,EACF,CAAC;EACH,IAAIS,IAAS,GAAG,EAAE;;EAKhB;EACA;EACA;EACA;EACA;;EAEA,MAAMC,eAAe,GAAIC,MAAkB,IAAK;IAE9C,IAAIC,MAAM,GAAGC,IAAI,CAACC,SAAS,CAACL,IAAI,CAAC;IAEjCM,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEJ,MAAM,CAAC;IAEnC,IAAIK,SAAS,GAAGF,YAAY,CAACG,OAAO,CAAC,KAAK,CAAC;;IAE/C;IACA,IAAIC,QAAQ,GAAGN,IAAI,CAACO,KAAK,CAACH,SAAS,CAAC;;IAE9B;IACA,MAAMI,qBAAqB,GAAGC,MAAM,CAACP,YAAY,CAACG,OAAO,CAAC,QAAQ,CAAC;IACnE,MAAMK,eAAe,GAAGF,qBAAqB,GAAGR,IAAI,CAACO,KAAK,CAACC,qBAAqB,CAAC,GAAG,EAAE;;IAEtF;IACA,MAAMG,cAAc,GAAG,CAAC,GAAGD,eAAe,EAAEZ,MAAM,CAAC;;IAEnD;IACD;;IAEC;IACD;EAEH,CAAC;EAGDc,OAAO,CAACC,GAAG,CAACnB,QAAQ,CAAC;EAGrBkB,OAAO,CAACC,GAAG,CAACC,OAAO,CAACC,GAAG,CAAC;EACxBH,OAAO,CAACC,GAAG,CAACrB,MAAM,CAAC;EACnB,oBACEH,OAAA;IAAA2B,QAAA,GACGxB,MAAM,IAAIA,MAAM,CAACyB,MAAM,IAAI,CAAC,iBAC3B5B,OAAA;MAAK6B,SAAS,EAAC,kBAAkB;MAAAF,QAAA,EAC9BzB,OAAO,CAAC4B,GAAG,CAAC,CAACrB,MAAM,EAAEsB,KAAK,KAAK;QAC9B,oBACE/B,OAAA;UACE6B,SAAS,EAAC,QAAQ;UAElBG,OAAO,EAAEA,CAAA,KAAM;YAACnC,YAAY,CAACY,MAAM,CAAC;YAClCD,eAAe,CAACC,MAAM,CAAC;UAEzB,CAAE;UAAAkB,QAAA,EACDlB,MAAM,CAACA;QAAM,GALR,GAAEA,MAAM,CAACwB,EAAG,IAAGF,KAAM,EAAC;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAMtB,CAAC;MAEb,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN,eACDrC,OAAA;MAAA2B,QAAA,EAAMxB,MAAM,IAAIA,MAAM,CAACyB,MAAM,IAAI,EAAE,iBAAI5B,OAAA,CAACJ,OAAO;QAACO,MAAM,EAAEA;MAAO;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtE,CAAC;AAEV,CAAC;AAACjC,EAAA,CAvEIH,OAAyB;EAAA,QAEEH,oBAAoB;AAAA;AAAAwC,EAAA,GAF/CrC,OAAyB;AAyE/B,eAAeA,OAAO;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
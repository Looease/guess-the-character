{"ast":null,"code":"import{getUrl}from\"../utils/getUrl\";export const handleCheckAnswers=async(data,setSessionData,environment)=>{//TODO make enum list\nconst fetchUrl=getUrl('check-answers',environment);try{const response=await fetch(\"\".concat(fetchUrl),{credentials:\"include\"});if(response.ok){const data=await response.json();if(data){setSessionData(data.sessionData);}}else{console.error(\"Failed to retrieve session data.\");}}catch(error){console.error(\"Error retrieving session data:\",error);}};","map":{"version":3,"names":["getUrl","handleCheckAnswers","data","setSessionData","environment","fetchUrl","response","fetch","concat","credentials","ok","json","sessionData","console","error"],"sources":["/Users/louisegilligan/GitRepos/guess-the-character/client/src/requests/handleCheckAnswers.tsx"],"sourcesContent":["import {getUrl} from \"../utils/getUrl\"\n\nexport const handleCheckAnswers = async (\n  data: any,\n  setSessionData: (data: any) => void,\n  environment?: string\n) => {\n\n  //TODO make enum list\n  const fetchUrl = getUrl('check-answers', environment)\n\n  try {\n    const response = await fetch(`${fetchUrl}`, {\n      credentials: \"include\",\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n      if (data) {\n        setSessionData(data.sessionData);\n      }\n    } else {\n      console.error(\"Failed to retrieve session data.\");\n    }\n  } catch (error) {\n    console.error(\"Error retrieving session data:\", error);\n  }\n};\n"],"mappings":"AAAA,OAAQA,MAAM,KAAO,iBAAiB,CAEtC,MAAO,MAAM,CAAAC,kBAAkB,CAAG,KAAAA,CAChCC,IAAS,CACTC,cAAmC,CACnCC,WAAoB,GACjB,CAEH;AACA,KAAM,CAAAC,QAAQ,CAAGL,MAAM,CAAC,eAAe,CAAEI,WAAW,CAAC,CAErD,GAAI,CACF,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIH,QAAQ,EAAI,CAC1CI,WAAW,CAAE,SACf,CAAC,CAAC,CAEF,GAAIH,QAAQ,CAACI,EAAE,CAAE,CACf,KAAM,CAAAR,IAAI,CAAG,KAAM,CAAAI,QAAQ,CAACK,IAAI,CAAC,CAAC,CAClC,GAAIT,IAAI,CAAE,CACRC,cAAc,CAACD,IAAI,CAACU,WAAW,CAAC,CAClC,CACF,CAAC,IAAM,CACLC,OAAO,CAACC,KAAK,CAAC,kCAAkC,CAAC,CACnD,CACF,CAAE,MAAOA,KAAK,CAAE,CACdD,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACxD,CACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\n// import {useEffect, useState, useRef} from 'react'\n\n// export const useLocalStorageState = (\n//     key: any,\n//     defaultValue: any,\n//     {serialize = JSON.stringify, deserialize = JSON.parse} = {},\n//   ) => {\n//     const [state, setState] = useState(() => {\n//       // ^ by adding () => we are enabling lazy state initialisation\n//       // We call window.localStorage when we need a value not every time we set a value\n//       const valueInLocalStorage = window.localStorage.getItem(key) || defaultValue\n//     })\n//       //if (valueInLocalStorage) {\n//        // return deserialize(valueInLocalStorage)\n//      // }\n//       //return typeof defaultValue === 'function' ? defaultValue() : defaultValue\n//       //^ If the default value is a complex function or computationally expensive.\n//       // This calls the function to return the data.\n//     //})\n\n//     const prevKeyRef = useRef(key)\n//     //If you want to remove the prev key we can use ref as it doesn't re-render\n\n//     useEffect(() => {\n//       const prevKey = prevKeyRef.current\n//       if (prevKey !== key) {\n//         window.localStorage.removeItem(prevKey)\n//       }\n//       //^removes previous key if the key changes between renders.\n//       prevKey.current = key\n//       //^ lazy state initialisation sets item when name changes\n//       //Local storage accepts strings - if we pass in numbers, we want to get then back as numbers.\n//       // We can stringify data we send to the store then parse it on return\n//       window.localStorage.setItem(key, serialize(state))\n//     }, [key, state, serialize])\n\n//     return [state, setState]\n//   }\n\nimport { useState } from 'react';\nexport const useLocalStorageState = (key, defaultValue, {\n  serialize = JSON.stringify,\n  deserialize = JSON.parse\n} = {}) => {\n  _s();\n  const [state, setState] = useState(() => {\n    const valueInLocalStorage = window.localStorage.getItem(key);\n    return valueInLocalStorage ? deserialize(valueInLocalStorage) : defaultValue;\n  });\n\n  //const prevKeyRef = useRef(key);\n\n  // useEffect(() => {\n  //   const prevKey = prevKeyRef.current;\n  //   if (prevKey !== key) {\n  //     window.localStorage.removeItem(prevKey);\n  //   }\n\n  //   prevKeyRef.current = key;\n  //   window.localStorage.setItem(key, serialize(state));\n  // }, [key, state, serialize]);\n\n  // Ensure the state is always an array\n  const stateArray = Array.isArray(state) ? state : [state];\n  return [stateArray, setState];\n};\n_s(useLocalStorageState, \"+oTKIrSGFNjeulkFS/dUwhDDgUQ=\");","map":{"version":3,"names":["useState","useLocalStorageState","key","defaultValue","serialize","JSON","stringify","deserialize","parse","_s","state","setState","valueInLocalStorage","window","localStorage","getItem","stateArray","Array","isArray"],"sources":["/Users/louisegilligan/GitRepos/guess-the-character/client/src/hooks/useLocalStorage.tsx"],"sourcesContent":["// import {useEffect, useState, useRef} from 'react'\n\n// export const useLocalStorageState = (\n//     key: any,\n//     defaultValue: any,\n//     {serialize = JSON.stringify, deserialize = JSON.parse} = {},\n//   ) => {\n//     const [state, setState] = useState(() => {\n//       // ^ by adding () => we are enabling lazy state initialisation\n//       // We call window.localStorage when we need a value not every time we set a value\n//       const valueInLocalStorage = window.localStorage.getItem(key) || defaultValue\n//     })\n//       //if (valueInLocalStorage) {\n//        // return deserialize(valueInLocalStorage)\n//      // }\n//       //return typeof defaultValue === 'function' ? defaultValue() : defaultValue\n//       //^ If the default value is a complex function or computationally expensive.\n//       // This calls the function to return the data.\n//     //})\n  \n//     const prevKeyRef = useRef(key)\n//     //If you want to remove the prev key we can use ref as it doesn't re-render\n  \n//     useEffect(() => {\n//       const prevKey = prevKeyRef.current\n//       if (prevKey !== key) {\n//         window.localStorage.removeItem(prevKey)\n//       }\n//       //^removes previous key if the key changes between renders.\n//       prevKey.current = key\n//       //^ lazy state initialisation sets item when name changes\n//       //Local storage accepts strings - if we pass in numbers, we want to get then back as numbers.\n//       // We can stringify data we send to the store then parse it on return\n//       window.localStorage.setItem(key, serialize(state))\n//     }, [key, state, serialize])\n  \n//     return [state, setState]\n//   }\n\n\nimport { useEffect, useState, useRef } from 'react';\n\nexport const useLocalStorageState = (\n  key: string,\n  defaultValue: [],\n  { serialize = JSON.stringify, deserialize = JSON.parse } = {},\n) => {\n  const [state, setState] = useState(() => {\n    const valueInLocalStorage = window.localStorage.getItem(key);\n    return valueInLocalStorage ? deserialize(valueInLocalStorage) : defaultValue;\n  });\n\n  //const prevKeyRef = useRef(key);\n\n  // useEffect(() => {\n  //   const prevKey = prevKeyRef.current;\n  //   if (prevKey !== key) {\n  //     window.localStorage.removeItem(prevKey);\n  //   }\n\n  //   prevKeyRef.current = key;\n  //   window.localStorage.setItem(key, serialize(state));\n  // }, [key, state, serialize]);\n\n  // Ensure the state is always an array\n  const stateArray = Array.isArray(state) ? state : [state];\n\n  return [stateArray, setState];\n};\n\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA,SAAoBA,QAAQ,QAAgB,OAAO;AAEnD,OAAO,MAAMC,oBAAoB,GAAGA,CAClCC,GAAW,EACXC,YAAgB,EAChB;EAAEC,SAAS,GAAGC,IAAI,CAACC,SAAS;EAAEC,WAAW,GAAGF,IAAI,CAACG;AAAM,CAAC,GAAG,CAAC,CAAC,KAC1D;EAAAC,EAAA;EACH,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,MAAM;IACvC,MAAMY,mBAAmB,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACb,GAAG,CAAC;IAC5D,OAAOU,mBAAmB,GAAGL,WAAW,CAACK,mBAAmB,CAAC,GAAGT,YAAY;EAC9E,CAAC,CAAC;;EAEF;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA,MAAMa,UAAU,GAAGC,KAAK,CAACC,OAAO,CAACR,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACA,KAAK,CAAC;EAEzD,OAAO,CAACM,UAAU,EAAEL,QAAQ,CAAC;AAC/B,CAAC;AAACF,EAAA,CA1BWR,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}
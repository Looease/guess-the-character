{"ast":null,"code":"var _jsxFileName = \"/Users/louisegilligan/GitRepos/guess-the-character/client/src/components/Answers/Answers.tsx\",\n  _s = $RefreshSig$();\nimport \"./Answers.css\";\nimport Results from \"../Results/Results\";\nimport { updateAnswer } from \"../../requests/updateAnswer\";\nimport { useLocalStorageState } from \"../../hooks/useLocalStorage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Answers = ({\n  answers,\n  scores\n}) => {\n  _s();\n  const [answers1, setAnswers] = useLocalStorageState('answer', []);\n  console.log(scores);\n\n  // const handleSetAnswer = () => {\n  //   if (scores !== null) {\n  //     setAnswers( 'answer',(prevAnswers: AnswerData[]) => [...prevAnswers, scores]);\n  //   }\n  // };\n\n  const handleSetAnswer = answer => {\n    let test = ['one', 'two'];\n    localStorage.setItem(\"answerArray\", JSON.stringify([answer, ...test]));\n\n    // Retrieve existing answers from local storage\n    //const existingAnswersString = window.localStorage.getItem('answer');\n    //  const existingAnswers = existingAnswersString ? JSON.parse(existingAnswersString) : [];\n\n    // Append the new answer to the existing array\n    //    const updatedAnswers = [...existingAnswers, answer];\n\n    // Save the updated array back to local storage\n    // window.localStorage.setItem('answer', JSON.stringify(updatedAnswers));\n\n    // Optionally, you can also update the state if needed\n    // setAnswers(updatedAnswers);\n  };\n  console.log(process.env);\n  console.log(scores, 'SCORES');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [scores && scores.length <= 9 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: answers.map((answer, index) => {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button\",\n          onClick: () => {\n            updateAnswer(answer);\n            handleSetAnswer(answer);\n          },\n          children: answer.answer\n        }, `${answer.id}=${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: scores && scores.length >= 10 && /*#__PURE__*/_jsxDEV(Results, {\n        scores: scores\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 46\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(Answers, \"RwVKu7atCqQg+fdLBcQP1t6/Skc=\", false, function () {\n  return [useLocalStorageState];\n});\n_c = Answers;\nexport default Answers;\nvar _c;\n$RefreshReg$(_c, \"Answers\");","map":{"version":3,"names":["Results","updateAnswer","useLocalStorageState","jsxDEV","_jsxDEV","Answers","answers","scores","_s","answers1","setAnswers","console","log","handleSetAnswer","answer","test","localStorage","setItem","JSON","stringify","process","env","children","length","className","map","index","onClick","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/louisegilligan/GitRepos/guess-the-character/client/src/components/Answers/Answers.tsx"],"sourcesContent":["import { FC } from \"react\";\nimport \"./Answers.css\";\nimport { AnswerData } from \"../../pages/Game/Game.types\";\nimport Results from \"../Results/Results\";\nimport { updateAnswer } from \"../../requests/updateAnswer\";\nimport {useLocalStorageState} from \"../../hooks/useLocalStorage\"\n\ntype AnswersProps = {\n  answers: AnswerData[];\n  scores?: AnswerData[];\n};\n\nconst Answers: FC<AnswersProps> = ({ answers, scores }) => {\n\n  const [answers1, setAnswers] = useLocalStorageState(\n    'answer',\n    []\n  );\n\n  console.log(scores)\n    \n  \n\n\n  // const handleSetAnswer = () => {\n  //   if (scores !== null) {\n  //     setAnswers( 'answer',(prevAnswers: AnswerData[]) => [...prevAnswers, scores]);\n  //   }\n  // };\n  \n  const handleSetAnswer = (answer: AnswerData) => {\n\n    let test: any = ['one', 'two']\n\n\n\n    localStorage.setItem(\"answerArray\", JSON.stringify([answer, ...test]))\n\n\n      // Retrieve existing answers from local storage\n      //const existingAnswersString = window.localStorage.getItem('answer');\n    //  const existingAnswers = existingAnswersString ? JSON.parse(existingAnswersString) : [];\n  \n      // Append the new answer to the existing array\n  //    const updatedAnswers = [...existingAnswers, answer];\n  \n      // Save the updated array back to local storage\n     // window.localStorage.setItem('answer', JSON.stringify(updatedAnswers));\n  \n      // Optionally, you can also update the state if needed\n     // setAnswers(updatedAnswers);\n  \n  };\n  \n\n  \n\n  console.log(process.env);\n  console.log(scores, 'SCORES')\n  return (\n    <div>\n      {scores && scores.length <= 9 && (\n        <div className=\"button-container\">\n          {answers.map((answer, index) => {\n            return (\n              <button\n                className=\"button\"\n                key={`${answer.id}=${index}`}\n                onClick={() => {updateAnswer(answer)\n                  handleSetAnswer(answer)\n                }}>\n                {answer.answer}\n              </button>\n            );\n          })}\n        </div>\n      )}\n      <div>{scores && scores.length >= 10 && <Results scores={scores} />}</div>\n    </div>\n  );\n};\n\nexport default Answers;\n"],"mappings":";;AACA,OAAO,eAAe;AAEtB,OAAOA,OAAO,MAAM,oBAAoB;AACxC,SAASC,YAAY,QAAQ,6BAA6B;AAC1D,SAAQC,oBAAoB,QAAO,6BAA6B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAOhE,MAAMC,OAAyB,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAEzD,MAAM,CAACC,QAAQ,EAAEC,UAAU,CAAC,GAAGR,oBAAoB,CACjD,QAAQ,EACR,EACF,CAAC;EAEDS,OAAO,CAACC,GAAG,CAACL,MAAM,CAAC;;EAKnB;EACA;EACA;EACA;EACA;;EAEA,MAAMM,eAAe,GAAIC,MAAkB,IAAK;IAE9C,IAAIC,IAAS,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC;IAI9BC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAAC,CAACL,MAAM,EAAE,GAAGC,IAAI,CAAC,CAAC,CAAC;;IAGpE;IACA;IACF;;IAEE;IACJ;;IAEI;IACD;;IAEC;IACD;EAEH,CAAC;EAKDJ,OAAO,CAACC,GAAG,CAACQ,OAAO,CAACC,GAAG,CAAC;EACxBV,OAAO,CAACC,GAAG,CAACL,MAAM,EAAE,QAAQ,CAAC;EAC7B,oBACEH,OAAA;IAAAkB,QAAA,GACGf,MAAM,IAAIA,MAAM,CAACgB,MAAM,IAAI,CAAC,iBAC3BnB,OAAA;MAAKoB,SAAS,EAAC,kBAAkB;MAAAF,QAAA,EAC9BhB,OAAO,CAACmB,GAAG,CAAC,CAACX,MAAM,EAAEY,KAAK,KAAK;QAC9B,oBACEtB,OAAA;UACEoB,SAAS,EAAC,QAAQ;UAElBG,OAAO,EAAEA,CAAA,KAAM;YAAC1B,YAAY,CAACa,MAAM,CAAC;YAClCD,eAAe,CAACC,MAAM,CAAC;UACzB,CAAE;UAAAQ,QAAA,EACDR,MAAM,CAACA;QAAM,GAJR,GAAEA,MAAM,CAACc,EAAG,IAAGF,KAAM,EAAC;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKtB,CAAC;MAEb,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN,eACD5B,OAAA;MAAAkB,QAAA,EAAMf,MAAM,IAAIA,MAAM,CAACgB,MAAM,IAAI,EAAE,iBAAInB,OAAA,CAACJ,OAAO;QAACO,MAAM,EAAEA;MAAO;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtE,CAAC;AAEV,CAAC;AAACxB,EAAA,CApEIH,OAAyB;EAAA,QAEEH,oBAAoB;AAAA;AAAA+B,EAAA,GAF/C5B,OAAyB;AAsE/B,eAAeA,OAAO;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
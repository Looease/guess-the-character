{"ast":null,"code":"var _s = $RefreshSig$();\n// import {useEffect, useState, useRef} from 'react'\n\n// export const useLocalStorageState = (\n//     key: any,\n//     defaultValue: any,\n//     {serialize = JSON.stringify, deserialize = JSON.parse} = {},\n//   ) => {\n//     const [state, setState] = useState(() => {\n//       // ^ by adding () => we are enabling lazy state initialisation\n//       // We call window.localStorage when we need a value not every time we set a value\n//       const valueInLocalStorage = window.localStorage.getItem(key) || defaultValue\n//     })\n//       //if (valueInLocalStorage) {\n//        // return deserialize(valueInLocalStorage)\n//      // }\n//       //return typeof defaultValue === 'function' ? defaultValue() : defaultValue\n//       //^ If the default value is a complex function or computationally expensive.\n//       // This calls the function to return the data.\n//     //})\n\n//     const prevKeyRef = useRef(key)\n//     //If you want to remove the prev key we can use ref as it doesn't re-render\n\n//     useEffect(() => {\n//       const prevKey = prevKeyRef.current\n//       if (prevKey !== key) {\n//         window.localStorage.removeItem(prevKey)\n//       }\n//       //^removes previous key if the key changes between renders.\n//       prevKey.current = key\n//       //^ lazy state initialisation sets item when name changes\n//       //Local storage accepts strings - if we pass in numbers, we want to get then back as numbers.\n//       // We can stringify data we send to the store then parse it on return\n//       window.localStorage.setItem(key, serialize(state))\n//     }, [key, state, serialize])\n\n//     return [state, setState]\n//   }\n\nimport { useEffect, useState, useRef } from 'react';\nexport const useLocalStorageState = (key, defaultValue, {\n  serialize = JSON.stringify,\n  deserialize = JSON.parse\n} = {}) => {\n  _s();\n  const [state, setState] = useState(() => {\n    const valueInLocalStorage = window.localStorage.getItem(key);\n    return valueInLocalStorage ? deserialize(valueInLocalStorage) : defaultValue;\n  });\n  const prevKeyRef = useRef(key);\n  useEffect(() => {\n    const prevKey = prevKeyRef.current;\n    if (prevKey !== key) {\n      window.localStorage.removeItem(prevKey);\n    }\n    prevKeyRef.current = key;\n    window.localStorage.setItem(key, serialize(state));\n  }, [key, state, serialize]);\n  return [state, setState];\n};\n_s(useLocalStorageState, \"Zplcv2Sxq6iyFXnWpzipnOjsZaQ=\");","map":{"version":3,"names":["useEffect","useState","useRef","useLocalStorageState","key","defaultValue","serialize","JSON","stringify","deserialize","parse","_s","state","setState","valueInLocalStorage","window","localStorage","getItem","prevKeyRef","prevKey","current","removeItem","setItem"],"sources":["/Users/louisegilligan/GitRepos/guess-the-character/client/src/hooks/useLocalStorage.tsx"],"sourcesContent":["// import {useEffect, useState, useRef} from 'react'\n\n// export const useLocalStorageState = (\n//     key: any,\n//     defaultValue: any,\n//     {serialize = JSON.stringify, deserialize = JSON.parse} = {},\n//   ) => {\n//     const [state, setState] = useState(() => {\n//       // ^ by adding () => we are enabling lazy state initialisation\n//       // We call window.localStorage when we need a value not every time we set a value\n//       const valueInLocalStorage = window.localStorage.getItem(key) || defaultValue\n//     })\n//       //if (valueInLocalStorage) {\n//        // return deserialize(valueInLocalStorage)\n//      // }\n//       //return typeof defaultValue === 'function' ? defaultValue() : defaultValue\n//       //^ If the default value is a complex function or computationally expensive.\n//       // This calls the function to return the data.\n//     //})\n  \n//     const prevKeyRef = useRef(key)\n//     //If you want to remove the prev key we can use ref as it doesn't re-render\n  \n//     useEffect(() => {\n//       const prevKey = prevKeyRef.current\n//       if (prevKey !== key) {\n//         window.localStorage.removeItem(prevKey)\n//       }\n//       //^removes previous key if the key changes between renders.\n//       prevKey.current = key\n//       //^ lazy state initialisation sets item when name changes\n//       //Local storage accepts strings - if we pass in numbers, we want to get then back as numbers.\n//       // We can stringify data we send to the store then parse it on return\n//       window.localStorage.setItem(key, serialize(state))\n//     }, [key, state, serialize])\n  \n//     return [state, setState]\n//   }\n\nimport { useEffect, useState, useRef } from 'react';\n\nexport const useLocalStorageState = (\n  key: any,\n  defaultValue: any,\n  { serialize = JSON.stringify, deserialize = JSON.parse } = {},\n) => {\n  const [state, setState] = useState(() => {\n    const valueInLocalStorage = window.localStorage.getItem(key);\n    return valueInLocalStorage ? deserialize(valueInLocalStorage) : defaultValue;\n  });\n\n  const prevKeyRef = useRef(key);\n\n  useEffect(() => {\n    const prevKey = prevKeyRef.current;\n    if (prevKey !== key) {\n      window.localStorage.removeItem(prevKey);\n    }\n\n    prevKeyRef.current = key;\n    window.localStorage.setItem(key, serialize(state));\n  }, [key, state, serialize]);\n\n  return [state, setState];\n};\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAEnD,OAAO,MAAMC,oBAAoB,GAAGA,CAClCC,GAAQ,EACRC,YAAiB,EACjB;EAAEC,SAAS,GAAGC,IAAI,CAACC,SAAS;EAAEC,WAAW,GAAGF,IAAI,CAACG;AAAM,CAAC,GAAG,CAAC,CAAC,KAC1D;EAAAC,EAAA;EACH,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,MAAM;IACvC,MAAMa,mBAAmB,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACb,GAAG,CAAC;IAC5D,OAAOU,mBAAmB,GAAGL,WAAW,CAACK,mBAAmB,CAAC,GAAGT,YAAY;EAC9E,CAAC,CAAC;EAEF,MAAMa,UAAU,GAAGhB,MAAM,CAACE,GAAG,CAAC;EAE9BJ,SAAS,CAAC,MAAM;IACd,MAAMmB,OAAO,GAAGD,UAAU,CAACE,OAAO;IAClC,IAAID,OAAO,KAAKf,GAAG,EAAE;MACnBW,MAAM,CAACC,YAAY,CAACK,UAAU,CAACF,OAAO,CAAC;IACzC;IAEAD,UAAU,CAACE,OAAO,GAAGhB,GAAG;IACxBW,MAAM,CAACC,YAAY,CAACM,OAAO,CAAClB,GAAG,EAAEE,SAAS,CAACM,KAAK,CAAC,CAAC;EACpD,CAAC,EAAE,CAACR,GAAG,EAAEQ,KAAK,EAAEN,SAAS,CAAC,CAAC;EAE3B,OAAO,CAACM,KAAK,EAAEC,QAAQ,CAAC;AAC1B,CAAC;AAACF,EAAA,CAvBWR,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}